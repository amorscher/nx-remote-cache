name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt
      - name: Install Redis CLI
        run: sudo apt-get update && sudo apt-get install -y redis-tools
      - name: Verify Redis is up
        run: redis-cli -h localhost ping
      - name: Flush Redis before tests
        run: redis-cli -h localhost FLUSHALL
      - name: Run Clippy (linter)
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Build project
        run: cargo build --all --release
      - name: Run tests
        run: cargo test --all --verbose
      - name: Upload Linux executable
        uses: actions/upload-artifact@v4
        with:
          name: nx-cache-server-linux
          path: target/release/nx-cache-server

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build project
        run: cargo build --all --release
      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: nx-cache-server-win
          path: target/release/nx-cache-server.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build project
        run: cargo build --all --release
      - name: Upload macOS executable
        uses: actions/upload-artifact@v4
        with:
          name: nx-cache-server-mac
          path: target/release/nx-cache-server

  package-npm:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Linux executable
        uses: actions/download-artifact@v4
        with:
          name: nx-cache-server-linux
          path: ./npm/bin/linux

      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: nx-cache-server-win
          path: ./npm/bin/win

      - name: Download macOS executable
        uses: actions/download-artifact@v4
        with:
          name: nx-cache-server-mac
          path: ./npm/bin/mac

      - name: Ensure permissions for Linux/macOS binaries
        run: |
          chmod +x ./npm/bin/linux/nx-cache-server || true
          chmod +x ./npm/bin/mac/nx-cache-server || true

      - name: Copy README.md to npm directory
        run: cp README.md npm/README.md

      - name: Pack npm package
        run: |
          cd npm
          npm pack

      - name: Install dependencies
        run: |
          cd npm
          npm install

      - name: Archive npm package
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: npm/*.tgz
      
      - name: Create Git tag (if release)
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MESSAGE" =~ ^chore\(release\): ]]; then
            VERSION=$(node -p "require('./npm/package.json').version")
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git tag "v$VERSION"
            git remote set-url origin https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git
            git push origin "v$VERSION"
          else
            echo "Not a release commit. Skipping tag."
          fi

 